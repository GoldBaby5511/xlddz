// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.20.3
// source: gameddz.proto

package gameddz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMDGameddz int32

const (
	CMDGameddz_IDNone             CMDGameddz = 0
	CMDGameddz_ID_S_GAME_START    CMDGameddz = 100 // 游戏开始
	CMDGameddz_ID_S_CALL_SCORE    CMDGameddz = 101 // 用户叫分
	CMDGameddz_ID_S_BANKER_INFO   CMDGameddz = 102 // 庄家信息
	CMDGameddz_ID_S_OUT_CARD      CMDGameddz = 103 // 用户出牌
	CMDGameddz_ID_S_PASS_CARD     CMDGameddz = 104 // 用户放弃
	CMDGameddz_ID_S_GAME_CONCLUDE CMDGameddz = 105 // 游戏结束
	CMDGameddz_ID_S_SET_BASESCORE CMDGameddz = 106 // 设置基数
	CMDGameddz_ID_S_CHEAT_CARD    CMDGameddz = 107 // 作弊扑克
	CMDGameddz_ID_S_TRUSTEE       CMDGameddz = 108 // 托管
	CMDGameddz_ID_S_ADDTIMES      CMDGameddz = 109 // 用户加倍
	CMDGameddz_ID_S_OUT_CARD_FAIL CMDGameddz = 110 // 出牌失败
	CMDGameddz_ID_S_REOUT_CARD    CMDGameddz = 111 // 重新发牌
	CMDGameddz_ID_C_CALL_SCORE    CMDGameddz = 201 // 用户叫分
	CMDGameddz_ID_C_OUT_CARD      CMDGameddz = 202 // 用户出牌
	CMDGameddz_ID_C_PASS_CARD     CMDGameddz = 203 // 用户放弃
	CMDGameddz_ID_C_TRUSTEE       CMDGameddz = 204 // 用户托管
	CMDGameddz_ID_C_ADDTIMES      CMDGameddz = 205 // 用户加倍
)

// Enum value maps for CMDGameddz.
var (
	CMDGameddz_name = map[int32]string{
		0:   "IDNone",
		100: "ID_S_GAME_START",
		101: "ID_S_CALL_SCORE",
		102: "ID_S_BANKER_INFO",
		103: "ID_S_OUT_CARD",
		104: "ID_S_PASS_CARD",
		105: "ID_S_GAME_CONCLUDE",
		106: "ID_S_SET_BASESCORE",
		107: "ID_S_CHEAT_CARD",
		108: "ID_S_TRUSTEE",
		109: "ID_S_ADDTIMES",
		110: "ID_S_OUT_CARD_FAIL",
		111: "ID_S_REOUT_CARD",
		201: "ID_C_CALL_SCORE",
		202: "ID_C_OUT_CARD",
		203: "ID_C_PASS_CARD",
		204: "ID_C_TRUSTEE",
		205: "ID_C_ADDTIMES",
	}
	CMDGameddz_value = map[string]int32{
		"IDNone":             0,
		"ID_S_GAME_START":    100,
		"ID_S_CALL_SCORE":    101,
		"ID_S_BANKER_INFO":   102,
		"ID_S_OUT_CARD":      103,
		"ID_S_PASS_CARD":     104,
		"ID_S_GAME_CONCLUDE": 105,
		"ID_S_SET_BASESCORE": 106,
		"ID_S_CHEAT_CARD":    107,
		"ID_S_TRUSTEE":       108,
		"ID_S_ADDTIMES":      109,
		"ID_S_OUT_CARD_FAIL": 110,
		"ID_S_REOUT_CARD":    111,
		"ID_C_CALL_SCORE":    201,
		"ID_C_OUT_CARD":      202,
		"ID_C_PASS_CARD":     203,
		"ID_C_TRUSTEE":       204,
		"ID_C_ADDTIMES":      205,
	}
)

func (x CMDGameddz) Enum() *CMDGameddz {
	p := new(CMDGameddz)
	*p = x
	return p
}

func (x CMDGameddz) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMDGameddz) Descriptor() protoreflect.EnumDescriptor {
	return file_gameddz_proto_enumTypes[0].Descriptor()
}

func (CMDGameddz) Type() protoreflect.EnumType {
	return &file_gameddz_proto_enumTypes[0]
}

func (x CMDGameddz) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMDGameddz.Descriptor instead.
func (CMDGameddz) EnumDescriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{0}
}

// 牌
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []uint32 `protobuf:"varint,1,rep,packed,name=card,proto3" json:"card,omitempty"`
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	mi := &file_gameddz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{0}
}

func (x *CardInfo) GetCard() []uint32 {
	if x != nil {
		return x.Card
	}
	return nil
}

// 空闲状态
type S_StatusFree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 游戏属性
	CellScore int64    `protobuf:"varint,1,opt,name=cell_score,json=cellScore,proto3" json:"cell_score,omitempty"` // 基础积分
	Times     []uint32 `protobuf:"varint,2,rep,packed,name=times,proto3" json:"times,omitempty"`                   // 最终倍数
	// 时间信息
	TimeCallLand    uint32   `protobuf:"varint,3,opt,name=time_call_land,json=timeCallLand,proto3" json:"time_call_land,omitempty"`            // 叫地主时间
	TimeAddTime     uint32   `protobuf:"varint,4,opt,name=time_add_time,json=timeAddTime,proto3" json:"time_add_time,omitempty"`               // 加倍时间
	TimeHeadOutCard uint32   `protobuf:"varint,5,opt,name=time_head_out_card,json=timeHeadOutCard,proto3" json:"time_head_out_card,omitempty"` // 首出时间
	TimeOutCard     uint32   `protobuf:"varint,6,opt,name=time_out_card,json=timeOutCard,proto3" json:"time_out_card,omitempty"`               // 出牌时间
	TimePassCard    uint32   `protobuf:"varint,7,opt,name=time_pass_card,json=timePassCard,proto3" json:"time_pass_card,omitempty"`            // 要不起时间
	PlayStatus      []uint32 `protobuf:"varint,8,rep,packed,name=play_status,json=playStatus,proto3" json:"play_status,omitempty"`             // 用户状态
	// 历史积分
	TurnScore    []int64 `protobuf:"varint,9,rep,packed,name=turn_score,json=turnScore,proto3" json:"turn_score,omitempty"`           // 积分信息
	CollectScore []int64 `protobuf:"varint,10,rep,packed,name=collect_score,json=collectScore,proto3" json:"collect_score,omitempty"` // 积分信息
}

func (x *S_StatusFree) Reset() {
	*x = S_StatusFree{}
	mi := &file_gameddz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_StatusFree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_StatusFree) ProtoMessage() {}

func (x *S_StatusFree) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_StatusFree.ProtoReflect.Descriptor instead.
func (*S_StatusFree) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{1}
}

func (x *S_StatusFree) GetCellScore() int64 {
	if x != nil {
		return x.CellScore
	}
	return 0
}

func (x *S_StatusFree) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_StatusFree) GetTimeCallLand() uint32 {
	if x != nil {
		return x.TimeCallLand
	}
	return 0
}

func (x *S_StatusFree) GetTimeAddTime() uint32 {
	if x != nil {
		return x.TimeAddTime
	}
	return 0
}

func (x *S_StatusFree) GetTimeHeadOutCard() uint32 {
	if x != nil {
		return x.TimeHeadOutCard
	}
	return 0
}

func (x *S_StatusFree) GetTimeOutCard() uint32 {
	if x != nil {
		return x.TimeOutCard
	}
	return 0
}

func (x *S_StatusFree) GetTimePassCard() uint32 {
	if x != nil {
		return x.TimePassCard
	}
	return 0
}

func (x *S_StatusFree) GetPlayStatus() []uint32 {
	if x != nil {
		return x.PlayStatus
	}
	return nil
}

func (x *S_StatusFree) GetTurnScore() []int64 {
	if x != nil {
		return x.TurnScore
	}
	return nil
}

func (x *S_StatusFree) GetCollectScore() []int64 {
	if x != nil {
		return x.CollectScore
	}
	return nil
}

// 叫庄状态
type S_StatusCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间信息
	TimeCallLand    uint32   `protobuf:"varint,1,opt,name=time_call_land,json=timeCallLand,proto3" json:"time_call_land,omitempty"`            // 叫地主时间
	TimeAddTime     uint32   `protobuf:"varint,2,opt,name=time_add_time,json=timeAddTime,proto3" json:"time_add_time,omitempty"`               // 加倍时间
	TimeHeadOutCard uint32   `protobuf:"varint,3,opt,name=time_head_out_card,json=timeHeadOutCard,proto3" json:"time_head_out_card,omitempty"` // 首出时间
	TimeOutCard     uint32   `protobuf:"varint,4,opt,name=time_out_card,json=timeOutCard,proto3" json:"time_out_card,omitempty"`               // 出牌时间
	TimePassCard    uint32   `protobuf:"varint,5,opt,name=time_pass_card,json=timePassCard,proto3" json:"time_pass_card,omitempty"`            // 要不起时间
	PlayStatus      []uint32 `protobuf:"varint,6,rep,packed,name=play_status,json=playStatus,proto3" json:"play_status,omitempty"`             // 用户状态
	// 游戏信息
	CellScore    int64    `protobuf:"varint,7,opt,name=cell_score,json=cellScore,proto3" json:"cell_score,omitempty"`                    // 单元积分
	Times        []uint32 `protobuf:"varint,8,rep,packed,name=times,proto3" json:"times,omitempty"`                                      // 最终倍数
	CurrentUser  uint32   `protobuf:"varint,9,opt,name=current_user,json=currentUser,proto3" json:"current_user,omitempty"`              // 当前玩家
	ScoreInfo    []uint32 `protobuf:"varint,10,rep,packed,name=score_info,json=scoreInfo,proto3" json:"score_info,omitempty"`            // 叫分信息
	HandCardData []uint32 `protobuf:"varint,11,rep,packed,name=hand_card_data,json=handCardData,proto3" json:"hand_card_data,omitempty"` // 手上扑克
	UserTrustee  []uint32 `protobuf:"varint,12,rep,packed,name=user_trustee,json=userTrustee,proto3" json:"user_trustee,omitempty"`      // 托管标志
	// 历史积分
	TurnScore    []int64 `protobuf:"varint,13,rep,packed,name=turn_score,json=turnScore,proto3" json:"turn_score,omitempty"`          // 积分信息
	CollectScore []int64 `protobuf:"varint,14,rep,packed,name=collect_score,json=collectScore,proto3" json:"collect_score,omitempty"` // 积分信息
}

func (x *S_StatusCall) Reset() {
	*x = S_StatusCall{}
	mi := &file_gameddz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_StatusCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_StatusCall) ProtoMessage() {}

func (x *S_StatusCall) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_StatusCall.ProtoReflect.Descriptor instead.
func (*S_StatusCall) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{2}
}

func (x *S_StatusCall) GetTimeCallLand() uint32 {
	if x != nil {
		return x.TimeCallLand
	}
	return 0
}

func (x *S_StatusCall) GetTimeAddTime() uint32 {
	if x != nil {
		return x.TimeAddTime
	}
	return 0
}

func (x *S_StatusCall) GetTimeHeadOutCard() uint32 {
	if x != nil {
		return x.TimeHeadOutCard
	}
	return 0
}

func (x *S_StatusCall) GetTimeOutCard() uint32 {
	if x != nil {
		return x.TimeOutCard
	}
	return 0
}

func (x *S_StatusCall) GetTimePassCard() uint32 {
	if x != nil {
		return x.TimePassCard
	}
	return 0
}

func (x *S_StatusCall) GetPlayStatus() []uint32 {
	if x != nil {
		return x.PlayStatus
	}
	return nil
}

func (x *S_StatusCall) GetCellScore() int64 {
	if x != nil {
		return x.CellScore
	}
	return 0
}

func (x *S_StatusCall) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_StatusCall) GetCurrentUser() uint32 {
	if x != nil {
		return x.CurrentUser
	}
	return 0
}

func (x *S_StatusCall) GetScoreInfo() []uint32 {
	if x != nil {
		return x.ScoreInfo
	}
	return nil
}

func (x *S_StatusCall) GetHandCardData() []uint32 {
	if x != nil {
		return x.HandCardData
	}
	return nil
}

func (x *S_StatusCall) GetUserTrustee() []uint32 {
	if x != nil {
		return x.UserTrustee
	}
	return nil
}

func (x *S_StatusCall) GetTurnScore() []int64 {
	if x != nil {
		return x.TurnScore
	}
	return nil
}

func (x *S_StatusCall) GetCollectScore() []int64 {
	if x != nil {
		return x.CollectScore
	}
	return nil
}

// 加倍状态
type S_StatusAddTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间信息
	TimeCallLand    uint32   `protobuf:"varint,1,opt,name=time_call_land,json=timeCallLand,proto3" json:"time_call_land,omitempty"`            // 叫地主时间
	TimeAddTime     uint32   `protobuf:"varint,2,opt,name=time_add_time,json=timeAddTime,proto3" json:"time_add_time,omitempty"`               // 加倍时间
	TimeHeadOutCard uint32   `protobuf:"varint,3,opt,name=time_head_out_card,json=timeHeadOutCard,proto3" json:"time_head_out_card,omitempty"` // 首出时间
	TimeOutCard     uint32   `protobuf:"varint,4,opt,name=time_out_card,json=timeOutCard,proto3" json:"time_out_card,omitempty"`               // 出牌时间
	TimePassCard    uint32   `protobuf:"varint,5,opt,name=time_pass_card,json=timePassCard,proto3" json:"time_pass_card,omitempty"`            // 要不起时间
	PlayStatus      []uint32 `protobuf:"varint,6,rep,packed,name=play_status,json=playStatus,proto3" json:"play_status,omitempty"`             // 用户状态
	CellScore       int64    `protobuf:"varint,7,opt,name=cell_score,json=cellScore,proto3" json:"cell_score,omitempty"`                       // 单元积分
	Times           []uint32 `protobuf:"varint,8,rep,packed,name=times,proto3" json:"times,omitempty"`                                         // 最终倍数
	CurrentUser     uint32   `protobuf:"varint,9,opt,name=current_user,json=currentUser,proto3" json:"current_user,omitempty"`                 // 当前玩家
	LandUser        uint32   `protobuf:"varint,10,opt,name=land_user,json=landUser,proto3" json:"land_user,omitempty"`                         // 地主
	ScoreInfo       []uint32 `protobuf:"varint,11,rep,packed,name=score_info,json=scoreInfo,proto3" json:"score_info,omitempty"`               // 叫分信息
	AddTimes        []uint32 `protobuf:"varint,12,rep,packed,name=add_times,json=addTimes,proto3" json:"add_times,omitempty"`                  // 加倍信息(0,不加倍；1，加倍；255，还没发送加倍消息)
	BankerCard      []uint32 `protobuf:"varint,13,rep,packed,name=banker_card,json=bankerCard,proto3" json:"banker_card,omitempty"`            // 游戏底牌
	HandCardData    []uint32 `protobuf:"varint,14,rep,packed,name=hand_card_data,json=handCardData,proto3" json:"hand_card_data,omitempty"`    // 手上扑克
	UserTrustee     []uint32 `protobuf:"varint,15,rep,packed,name=user_trustee,json=userTrustee,proto3" json:"user_trustee,omitempty"`         // 托管标志
	TurnScore       []int64  `protobuf:"varint,16,rep,packed,name=turn_score,json=turnScore,proto3" json:"turn_score,omitempty"`               // 积分信息
	CollectScore    []int64  `protobuf:"varint,17,rep,packed,name=collect_score,json=collectScore,proto3" json:"collect_score,omitempty"`      // 积分信息
}

func (x *S_StatusAddTimes) Reset() {
	*x = S_StatusAddTimes{}
	mi := &file_gameddz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_StatusAddTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_StatusAddTimes) ProtoMessage() {}

func (x *S_StatusAddTimes) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_StatusAddTimes.ProtoReflect.Descriptor instead.
func (*S_StatusAddTimes) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{3}
}

func (x *S_StatusAddTimes) GetTimeCallLand() uint32 {
	if x != nil {
		return x.TimeCallLand
	}
	return 0
}

func (x *S_StatusAddTimes) GetTimeAddTime() uint32 {
	if x != nil {
		return x.TimeAddTime
	}
	return 0
}

func (x *S_StatusAddTimes) GetTimeHeadOutCard() uint32 {
	if x != nil {
		return x.TimeHeadOutCard
	}
	return 0
}

func (x *S_StatusAddTimes) GetTimeOutCard() uint32 {
	if x != nil {
		return x.TimeOutCard
	}
	return 0
}

func (x *S_StatusAddTimes) GetTimePassCard() uint32 {
	if x != nil {
		return x.TimePassCard
	}
	return 0
}

func (x *S_StatusAddTimes) GetPlayStatus() []uint32 {
	if x != nil {
		return x.PlayStatus
	}
	return nil
}

func (x *S_StatusAddTimes) GetCellScore() int64 {
	if x != nil {
		return x.CellScore
	}
	return 0
}

func (x *S_StatusAddTimes) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_StatusAddTimes) GetCurrentUser() uint32 {
	if x != nil {
		return x.CurrentUser
	}
	return 0
}

func (x *S_StatusAddTimes) GetLandUser() uint32 {
	if x != nil {
		return x.LandUser
	}
	return 0
}

func (x *S_StatusAddTimes) GetScoreInfo() []uint32 {
	if x != nil {
		return x.ScoreInfo
	}
	return nil
}

func (x *S_StatusAddTimes) GetAddTimes() []uint32 {
	if x != nil {
		return x.AddTimes
	}
	return nil
}

func (x *S_StatusAddTimes) GetBankerCard() []uint32 {
	if x != nil {
		return x.BankerCard
	}
	return nil
}

func (x *S_StatusAddTimes) GetHandCardData() []uint32 {
	if x != nil {
		return x.HandCardData
	}
	return nil
}

func (x *S_StatusAddTimes) GetUserTrustee() []uint32 {
	if x != nil {
		return x.UserTrustee
	}
	return nil
}

func (x *S_StatusAddTimes) GetTurnScore() []int64 {
	if x != nil {
		return x.TurnScore
	}
	return nil
}

func (x *S_StatusAddTimes) GetCollectScore() []int64 {
	if x != nil {
		return x.CollectScore
	}
	return nil
}

// 游戏状态
type S_StatusPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间信息
	TimeCallLand    uint32   `protobuf:"varint,1,opt,name=time_call_land,json=timeCallLand,proto3" json:"time_call_land,omitempty"`            // 叫地主时间
	TimeAddTime     uint32   `protobuf:"varint,2,opt,name=time_add_time,json=timeAddTime,proto3" json:"time_add_time,omitempty"`               // 加倍时间
	TimeHeadOutCard uint32   `protobuf:"varint,3,opt,name=time_head_out_card,json=timeHeadOutCard,proto3" json:"time_head_out_card,omitempty"` // 首出时间
	TimeOutCard     uint32   `protobuf:"varint,4,opt,name=time_out_card,json=timeOutCard,proto3" json:"time_out_card,omitempty"`               // 出牌时间
	TimePassCard    uint32   `protobuf:"varint,5,opt,name=time_pass_card,json=timePassCard,proto3" json:"time_pass_card,omitempty"`            // 要不起时间
	PlayStatus      []uint32 `protobuf:"varint,6,rep,packed,name=play_status,json=playStatus,proto3" json:"play_status,omitempty"`             // 用户状态
	// 游戏变量
	CellScore   int64    `protobuf:"varint,7,opt,name=cell_score,json=cellScore,proto3" json:"cell_score,omitempty"`        // 单元积分
	Times       []uint32 `protobuf:"varint,8,rep,packed,name=times,proto3" json:"times,omitempty"`                          // 最终倍数
	BombCount   uint32   `protobuf:"varint,9,opt,name=bomb_count,json=bombCount,proto3" json:"bomb_count,omitempty"`        // 炸弹次数
	BankerUser  uint32   `protobuf:"varint,10,opt,name=banker_user,json=bankerUser,proto3" json:"banker_user,omitempty"`    // 庄家用户
	CurrentUser uint32   `protobuf:"varint,11,opt,name=current_user,json=currentUser,proto3" json:"current_user,omitempty"` // 当前玩家
	// 出牌信息
	TurnWiner     uint32   `protobuf:"varint,12,opt,name=turn_winer,json=turnWiner,proto3" json:"turn_winer,omitempty"`                   // 胜利玩家
	TurnCardCount uint32   `protobuf:"varint,13,opt,name=turn_card_count,json=turnCardCount,proto3" json:"turn_card_count,omitempty"`     // 出牌数目
	TurnCardData  []uint32 `protobuf:"varint,14,rep,packed,name=turn_card_data,json=turnCardData,proto3" json:"turn_card_data,omitempty"` // 出牌数据
	// 扑克信息
	BankerCard      []uint32    `protobuf:"varint,15,rep,packed,name=banker_card,json=bankerCard,proto3" json:"banker_card,omitempty"`                  // 游戏底牌
	HandCardData    []uint32    `protobuf:"varint,16,rep,packed,name=hand_card_data,json=handCardData,proto3" json:"hand_card_data,omitempty"`          // 手上扑克
	HandCardCount   []uint32    `protobuf:"varint,17,rep,packed,name=hand_card_count,json=handCardCount,proto3" json:"hand_card_count,omitempty"`       // 扑克数目
	LastOutState    []uint32    `protobuf:"varint,18,rep,packed,name=last_out_state,json=lastOutState,proto3" json:"last_out_state,omitempty"`          // 上一次出牌态(0xff，初始态；0，不出；1，出）
	LastCardCount   []uint32    `protobuf:"varint,19,rep,packed,name=last_card_count,json=lastCardCount,proto3" json:"last_card_count,omitempty"`       // 上一手出牌数
	LastCardData    []*CardInfo `protobuf:"bytes,20,rep,name=last_card_data,json=lastCardData,proto3" json:"last_card_data,omitempty"`                  // 上一手出牌
	Active          uint32      `protobuf:"varint,21,opt,name=active,proto3" json:"active,omitempty"`                                                   // 是否主动出牌(0,被动；1，主动)
	SearchCount     uint32      `protobuf:"varint,22,opt,name=search_count,json=searchCount,proto3" json:"search_count,omitempty"`                      // 解的个数
	SearchCardCount []uint32    `protobuf:"varint,23,rep,packed,name=search_card_count,json=searchCardCount,proto3" json:"search_card_count,omitempty"` // 每个解的牌数
	ResultCard      []*CardInfo `protobuf:"bytes,24,rep,name=result_card,json=resultCard,proto3" json:"result_card,omitempty"`                          // 结果扑克
	// 历史积分
	TurnScore    []int64  `protobuf:"varint,25,rep,packed,name=turn_score,json=turnScore,proto3" json:"turn_score,omitempty"`          // 积分信息
	CollectScore []int64  `protobuf:"varint,26,rep,packed,name=collect_score,json=collectScore,proto3" json:"collect_score,omitempty"` // 积分信息
	UserTrustee  []uint32 `protobuf:"varint,27,rep,packed,name=user_trustee,json=userTrustee,proto3" json:"user_trustee,omitempty"`    // 托管标志
}

func (x *S_StatusPlay) Reset() {
	*x = S_StatusPlay{}
	mi := &file_gameddz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_StatusPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_StatusPlay) ProtoMessage() {}

func (x *S_StatusPlay) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_StatusPlay.ProtoReflect.Descriptor instead.
func (*S_StatusPlay) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{4}
}

func (x *S_StatusPlay) GetTimeCallLand() uint32 {
	if x != nil {
		return x.TimeCallLand
	}
	return 0
}

func (x *S_StatusPlay) GetTimeAddTime() uint32 {
	if x != nil {
		return x.TimeAddTime
	}
	return 0
}

func (x *S_StatusPlay) GetTimeHeadOutCard() uint32 {
	if x != nil {
		return x.TimeHeadOutCard
	}
	return 0
}

func (x *S_StatusPlay) GetTimeOutCard() uint32 {
	if x != nil {
		return x.TimeOutCard
	}
	return 0
}

func (x *S_StatusPlay) GetTimePassCard() uint32 {
	if x != nil {
		return x.TimePassCard
	}
	return 0
}

func (x *S_StatusPlay) GetPlayStatus() []uint32 {
	if x != nil {
		return x.PlayStatus
	}
	return nil
}

func (x *S_StatusPlay) GetCellScore() int64 {
	if x != nil {
		return x.CellScore
	}
	return 0
}

func (x *S_StatusPlay) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_StatusPlay) GetBombCount() uint32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

func (x *S_StatusPlay) GetBankerUser() uint32 {
	if x != nil {
		return x.BankerUser
	}
	return 0
}

func (x *S_StatusPlay) GetCurrentUser() uint32 {
	if x != nil {
		return x.CurrentUser
	}
	return 0
}

func (x *S_StatusPlay) GetTurnWiner() uint32 {
	if x != nil {
		return x.TurnWiner
	}
	return 0
}

func (x *S_StatusPlay) GetTurnCardCount() uint32 {
	if x != nil {
		return x.TurnCardCount
	}
	return 0
}

func (x *S_StatusPlay) GetTurnCardData() []uint32 {
	if x != nil {
		return x.TurnCardData
	}
	return nil
}

func (x *S_StatusPlay) GetBankerCard() []uint32 {
	if x != nil {
		return x.BankerCard
	}
	return nil
}

func (x *S_StatusPlay) GetHandCardData() []uint32 {
	if x != nil {
		return x.HandCardData
	}
	return nil
}

func (x *S_StatusPlay) GetHandCardCount() []uint32 {
	if x != nil {
		return x.HandCardCount
	}
	return nil
}

func (x *S_StatusPlay) GetLastOutState() []uint32 {
	if x != nil {
		return x.LastOutState
	}
	return nil
}

func (x *S_StatusPlay) GetLastCardCount() []uint32 {
	if x != nil {
		return x.LastCardCount
	}
	return nil
}

func (x *S_StatusPlay) GetLastCardData() []*CardInfo {
	if x != nil {
		return x.LastCardData
	}
	return nil
}

func (x *S_StatusPlay) GetActive() uint32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *S_StatusPlay) GetSearchCount() uint32 {
	if x != nil {
		return x.SearchCount
	}
	return 0
}

func (x *S_StatusPlay) GetSearchCardCount() []uint32 {
	if x != nil {
		return x.SearchCardCount
	}
	return nil
}

func (x *S_StatusPlay) GetResultCard() []*CardInfo {
	if x != nil {
		return x.ResultCard
	}
	return nil
}

func (x *S_StatusPlay) GetTurnScore() []int64 {
	if x != nil {
		return x.TurnScore
	}
	return nil
}

func (x *S_StatusPlay) GetCollectScore() []int64 {
	if x != nil {
		return x.CollectScore
	}
	return nil
}

func (x *S_StatusPlay) GetUserTrustee() []uint32 {
	if x != nil {
		return x.UserTrustee
	}
	return nil
}

// 游戏开始
type S_GameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartUser      uint32   `protobuf:"varint,1,opt,name=start_user,json=startUser,proto3" json:"start_user,omitempty"`                  // 椅子ID,标明谁开始叫地主,
	ValidCardData  uint32   `protobuf:"varint,2,opt,name=valid_card_data,json=validCardData,proto3" json:"valid_card_data,omitempty"`    // 明牌扑克值
	ValidCardIndex uint32   `protobuf:"varint,3,opt,name=valid_card_index,json=validCardIndex,proto3" json:"valid_card_index,omitempty"` // 明牌位置，在51张牌里面随机出来的索引,取值 0-50
	CardData       []uint32 `protobuf:"varint,4,rep,packed,name=card_data,json=cardData,proto3" json:"card_data,omitempty"`              // 本玩家收到的17张扑克
	PlayStatus     []uint32 `protobuf:"varint,5,rep,packed,name=play_status,json=playStatus,proto3" json:"play_status,omitempty"`        // 用户状态
}

func (x *S_GameStart) Reset() {
	*x = S_GameStart{}
	mi := &file_gameddz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_GameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_GameStart) ProtoMessage() {}

func (x *S_GameStart) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_GameStart.ProtoReflect.Descriptor instead.
func (*S_GameStart) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{5}
}

func (x *S_GameStart) GetStartUser() uint32 {
	if x != nil {
		return x.StartUser
	}
	return 0
}

func (x *S_GameStart) GetValidCardData() uint32 {
	if x != nil {
		return x.ValidCardData
	}
	return 0
}

func (x *S_GameStart) GetValidCardIndex() uint32 {
	if x != nil {
		return x.ValidCardIndex
	}
	return 0
}

func (x *S_GameStart) GetCardData() []uint32 {
	if x != nil {
		return x.CardData
	}
	return nil
}

func (x *S_GameStart) GetPlayStatus() []uint32 {
	if x != nil {
		return x.PlayStatus
	}
	return nil
}

// 重新发牌
type S_ReOutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartUser uint32   `protobuf:"varint,1,opt,name=start_user,json=startUser,proto3" json:"start_user,omitempty"`     // 椅子ID,标明谁开始叫地主,
	CardData  []uint32 `protobuf:"varint,2,rep,packed,name=card_data,json=cardData,proto3" json:"card_data,omitempty"` // 本玩家收到的17张扑克
}

func (x *S_ReOutCard) Reset() {
	*x = S_ReOutCard{}
	mi := &file_gameddz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_ReOutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_ReOutCard) ProtoMessage() {}

func (x *S_ReOutCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_ReOutCard.ProtoReflect.Descriptor instead.
func (*S_ReOutCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{6}
}

func (x *S_ReOutCard) GetStartUser() uint32 {
	if x != nil {
		return x.StartUser
	}
	return 0
}

func (x *S_ReOutCard) GetCardData() []uint32 {
	if x != nil {
		return x.CardData
	}
	return nil
}

// 机器人扑克
type S_AndroidCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCard    []*CardInfo `protobuf:"bytes,1,rep,name=hand_card,json=handCard,proto3" json:"hand_card,omitempty"` // 手上扑克
	BankerCard  []uint32    `protobuf:"varint,2,rep,packed,name=banker_card,json=bankerCard,proto3" json:"banker_card,omitempty"`
	CurrentUser uint32      `protobuf:"varint,3,opt,name=current_user,json=currentUser,proto3" json:"current_user,omitempty"`  //当前玩家
	IsAndroid   []uint32    `protobuf:"varint,4,rep,packed,name=is_android,json=isAndroid,proto3" json:"is_android,omitempty"` //用户类型
}

func (x *S_AndroidCard) Reset() {
	*x = S_AndroidCard{}
	mi := &file_gameddz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_AndroidCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_AndroidCard) ProtoMessage() {}

func (x *S_AndroidCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_AndroidCard.ProtoReflect.Descriptor instead.
func (*S_AndroidCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{7}
}

func (x *S_AndroidCard) GetHandCard() []*CardInfo {
	if x != nil {
		return x.HandCard
	}
	return nil
}

func (x *S_AndroidCard) GetBankerCard() []uint32 {
	if x != nil {
		return x.BankerCard
	}
	return nil
}

func (x *S_AndroidCard) GetCurrentUser() uint32 {
	if x != nil {
		return x.CurrentUser
	}
	return 0
}

func (x *S_AndroidCard) GetIsAndroid() []uint32 {
	if x != nil {
		return x.IsAndroid
	}
	return nil
}

// 作弊扑克
type S_CheatCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardUser  []uint32    `protobuf:"varint,1,rep,packed,name=card_user,json=cardUser,proto3" json:"card_user,omitempty"`    // 作弊玩家
	UserCount uint32      `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`        // 作弊数量
	CardData  []*CardInfo `protobuf:"bytes,3,rep,name=card_data,json=cardData,proto3" json:"card_data,omitempty"`            // 扑克列表
	CardCount []uint32    `protobuf:"varint,4,rep,packed,name=card_count,json=cardCount,proto3" json:"card_count,omitempty"` // 扑克数量
}

func (x *S_CheatCard) Reset() {
	*x = S_CheatCard{}
	mi := &file_gameddz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_CheatCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_CheatCard) ProtoMessage() {}

func (x *S_CheatCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_CheatCard.ProtoReflect.Descriptor instead.
func (*S_CheatCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{8}
}

func (x *S_CheatCard) GetCardUser() []uint32 {
	if x != nil {
		return x.CardUser
	}
	return nil
}

func (x *S_CheatCard) GetUserCount() uint32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *S_CheatCard) GetCardData() []*CardInfo {
	if x != nil {
		return x.CardData
	}
	return nil
}

func (x *S_CheatCard) GetCardCount() []uint32 {
	if x != nil {
		return x.CardCount
	}
	return nil
}

// 用户抢地主
type S_RobLand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobLandUser uint32   `protobuf:"varint,1,opt,name=rob_land_user,json=robLandUser,proto3" json:"rob_land_user,omitempty"` // 这次抢地主的玩家
	NextUser    uint32   `protobuf:"varint,2,opt,name=next_user,json=nextUser,proto3" json:"next_user,omitempty"`            // 下一个抢地主的玩家
	RobLand     uint32   `protobuf:"varint,3,opt,name=rob_land,json=robLand,proto3" json:"rob_land,omitempty"`               // 抢地主标志（0，不叫;1，不抢；2，叫；3，抢）
	Times       []uint32 `protobuf:"varint,4,rep,packed,name=times,proto3" json:"times,omitempty"`                           // 抢完地主之后的倍数
}

func (x *S_RobLand) Reset() {
	*x = S_RobLand{}
	mi := &file_gameddz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_RobLand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_RobLand) ProtoMessage() {}

func (x *S_RobLand) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_RobLand.ProtoReflect.Descriptor instead.
func (*S_RobLand) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{9}
}

func (x *S_RobLand) GetRobLandUser() uint32 {
	if x != nil {
		return x.RobLandUser
	}
	return 0
}

func (x *S_RobLand) GetNextUser() uint32 {
	if x != nil {
		return x.NextUser
	}
	return 0
}

func (x *S_RobLand) GetRobLand() uint32 {
	if x != nil {
		return x.RobLand
	}
	return 0
}

func (x *S_RobLand) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

type S_AddTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       uint32   `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`                                 // 触发加倍操作的玩家
	AddTimes   uint32   `protobuf:"varint,2,opt,name=add_times,json=addTimes,proto3" json:"add_times,omitempty"`         // 是否加倍（0，不加倍;1,加倍）
	Times      []uint32 `protobuf:"varint,3,rep,packed,name=times,proto3" json:"times,omitempty"`                        // 此次加倍之后的总的倍数
	CanOutCard uint32   `protobuf:"varint,4,opt,name=can_out_card,json=canOutCard,proto3" json:"can_out_card,omitempty"` // 是否可以出牌了
}

func (x *S_AddTimes) Reset() {
	*x = S_AddTimes{}
	mi := &file_gameddz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_AddTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_AddTimes) ProtoMessage() {}

func (x *S_AddTimes) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_AddTimes.ProtoReflect.Descriptor instead.
func (*S_AddTimes) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{10}
}

func (x *S_AddTimes) GetUser() uint32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *S_AddTimes) GetAddTimes() uint32 {
	if x != nil {
		return x.AddTimes
	}
	return 0
}

func (x *S_AddTimes) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_AddTimes) GetCanOutCard() uint32 {
	if x != nil {
		return x.CanOutCard
	}
	return 0
}

// 地主消息
type S_BankerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerUser uint32   `protobuf:"varint,1,opt,name=banker_user,json=bankerUser,proto3" json:"banker_user,omitempty"`        // 谁当了地主
	Times      []uint32 `protobuf:"varint,2,rep,packed,name=times,proto3" json:"times,omitempty"`                             // 抢完地主之后的倍数
	BankerCard []uint32 `protobuf:"varint,3,rep,packed,name=banker_card,json=bankerCard,proto3" json:"banker_card,omitempty"` // 地主拿到的三张扑克
	HasAddTime uint32   `protobuf:"varint,4,opt,name=has_add_time,json=hasAddTime,proto3" json:"has_add_time,omitempty"`      // 是否有加倍的流程
}

func (x *S_BankerInfo) Reset() {
	*x = S_BankerInfo{}
	mi := &file_gameddz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_BankerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_BankerInfo) ProtoMessage() {}

func (x *S_BankerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_BankerInfo.ProtoReflect.Descriptor instead.
func (*S_BankerInfo) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{11}
}

func (x *S_BankerInfo) GetBankerUser() uint32 {
	if x != nil {
		return x.BankerUser
	}
	return 0
}

func (x *S_BankerInfo) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_BankerInfo) GetBankerCard() []uint32 {
	if x != nil {
		return x.BankerCard
	}
	return nil
}

func (x *S_BankerInfo) GetHasAddTime() uint32 {
	if x != nil {
		return x.HasAddTime
	}
	return 0
}

// 用户出牌 S-C
type S_OutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutCardUser        uint32      `protobuf:"varint,1,opt,name=out_card_user,json=outCardUser,proto3" json:"out_card_user,omitempty"`                          // 出牌玩家
	CardType           uint32      `protobuf:"varint,2,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                                     // 出牌类型
	CardCount          uint32      `protobuf:"varint,3,opt,name=card_count,json=cardCount,proto3" json:"card_count,omitempty"`                                  // 出牌数目
	CardData           []uint32    `protobuf:"varint,4,rep,packed,name=card_data,json=cardData,proto3" json:"card_data,omitempty"`                              // 扑克列表
	Times              []uint32    `protobuf:"varint,5,rep,packed,name=times,proto3" json:"times,omitempty"`                                                    // 此次出牌之后各玩家的倍数
	NextUser           uint32      `protobuf:"varint,6,opt,name=next_user,json=nextUser,proto3" json:"next_user,omitempty"`                                     // 下一个出牌玩家
	NextUserCanOutCard uint32      `protobuf:"varint,7,opt,name=next_user_can_out_card,json=nextUserCanOutCard,proto3" json:"next_user_can_out_card,omitempty"` // 下一家是否要得起	(0,要不起；1，要得起)
	RestCardCount      []uint32    `protobuf:"varint,8,rep,packed,name=rest_card_count,json=restCardCount,proto3" json:"rest_card_count,omitempty"`             // 所有玩家余下扑克数目
	SearchCount        uint32      `protobuf:"varint,9,opt,name=search_count,json=searchCount,proto3" json:"search_count,omitempty"`                            // 解的个数
	SearchCardCount    []uint32    `protobuf:"varint,10,rep,packed,name=search_card_count,json=searchCardCount,proto3" json:"search_card_count,omitempty"`      // 每个解的牌数
	ResultCard         []*CardInfo `protobuf:"bytes,11,rep,name=result_card,json=resultCard,proto3" json:"result_card,omitempty"`                               // 结果扑克
}

func (x *S_OutCard) Reset() {
	*x = S_OutCard{}
	mi := &file_gameddz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_OutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_OutCard) ProtoMessage() {}

func (x *S_OutCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_OutCard.ProtoReflect.Descriptor instead.
func (*S_OutCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{12}
}

func (x *S_OutCard) GetOutCardUser() uint32 {
	if x != nil {
		return x.OutCardUser
	}
	return 0
}

func (x *S_OutCard) GetCardType() uint32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *S_OutCard) GetCardCount() uint32 {
	if x != nil {
		return x.CardCount
	}
	return 0
}

func (x *S_OutCard) GetCardData() []uint32 {
	if x != nil {
		return x.CardData
	}
	return nil
}

func (x *S_OutCard) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *S_OutCard) GetNextUser() uint32 {
	if x != nil {
		return x.NextUser
	}
	return 0
}

func (x *S_OutCard) GetNextUserCanOutCard() uint32 {
	if x != nil {
		return x.NextUserCanOutCard
	}
	return 0
}

func (x *S_OutCard) GetRestCardCount() []uint32 {
	if x != nil {
		return x.RestCardCount
	}
	return nil
}

func (x *S_OutCard) GetSearchCount() uint32 {
	if x != nil {
		return x.SearchCount
	}
	return 0
}

func (x *S_OutCard) GetSearchCardCount() []uint32 {
	if x != nil {
		return x.SearchCardCount
	}
	return nil
}

func (x *S_OutCard) GetResultCard() []*CardInfo {
	if x != nil {
		return x.ResultCard
	}
	return nil
}

// 出牌失败
type S_OutCardFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescribeString string `protobuf:"bytes,1,opt,name=describe_string,json=describeString,proto3" json:"describe_string,omitempty"` // 错误描述
}

func (x *S_OutCardFail) Reset() {
	*x = S_OutCardFail{}
	mi := &file_gameddz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_OutCardFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_OutCardFail) ProtoMessage() {}

func (x *S_OutCardFail) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_OutCardFail.ProtoReflect.Descriptor instead.
func (*S_OutCardFail) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{13}
}

func (x *S_OutCardFail) GetDescribeString() string {
	if x != nil {
		return x.DescribeString
	}
	return ""
}

// 放弃出牌
type S_PassCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnOver           uint32      `protobuf:"varint,1,opt,name=turn_over,json=turnOver,proto3" json:"turn_over,omitempty"`                                     // 一轮结束
	PassCardUser       uint32      `protobuf:"varint,2,opt,name=pass_card_user,json=passCardUser,proto3" json:"pass_card_user,omitempty"`                       // 放弃玩家
	NextUser           uint32      `protobuf:"varint,3,opt,name=next_user,json=nextUser,proto3" json:"next_user,omitempty"`                                     // 下一个出牌玩家
	NextUserCanOutCard uint32      `protobuf:"varint,4,opt,name=next_user_can_out_card,json=nextUserCanOutCard,proto3" json:"next_user_can_out_card,omitempty"` // 下一家是否要得起(0,要不起；1，要得起)
	SearchCount        uint32      `protobuf:"varint,5,opt,name=search_count,json=searchCount,proto3" json:"search_count,omitempty"`                            // 解的个数
	SearchCardCount    []uint32    `protobuf:"varint,6,rep,packed,name=search_card_count,json=searchCardCount,proto3" json:"search_card_count,omitempty"`       // 每个解的牌数
	ResultCard         []*CardInfo `protobuf:"bytes,7,rep,name=result_card,json=resultCard,proto3" json:"result_card,omitempty"`                                // 结果扑克
}

func (x *S_PassCard) Reset() {
	*x = S_PassCard{}
	mi := &file_gameddz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_PassCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_PassCard) ProtoMessage() {}

func (x *S_PassCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_PassCard.ProtoReflect.Descriptor instead.
func (*S_PassCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{14}
}

func (x *S_PassCard) GetTurnOver() uint32 {
	if x != nil {
		return x.TurnOver
	}
	return 0
}

func (x *S_PassCard) GetPassCardUser() uint32 {
	if x != nil {
		return x.PassCardUser
	}
	return 0
}

func (x *S_PassCard) GetNextUser() uint32 {
	if x != nil {
		return x.NextUser
	}
	return 0
}

func (x *S_PassCard) GetNextUserCanOutCard() uint32 {
	if x != nil {
		return x.NextUserCanOutCard
	}
	return 0
}

func (x *S_PassCard) GetSearchCount() uint32 {
	if x != nil {
		return x.SearchCount
	}
	return 0
}

func (x *S_PassCard) GetSearchCardCount() []uint32 {
	if x != nil {
		return x.SearchCardCount
	}
	return nil
}

func (x *S_PassCard) GetResultCard() []*CardInfo {
	if x != nil {
		return x.ResultCard
	}
	return nil
}

// 游戏结束
type S_GameConclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellScore     int64       `protobuf:"varint,1,opt,name=cell_score,json=cellScore,proto3" json:"cell_score,omitempty"`                      // 单元积分
	GameScore     []int64     `protobuf:"varint,2,rep,packed,name=game_score,json=gameScore,proto3" json:"game_score,omitempty"`               // 游戏积分
	ChunTian      uint32      `protobuf:"varint,3,opt,name=chun_tian,json=chunTian,proto3" json:"chun_tian,omitempty"`                         // 春天标志
	FanChunTian   uint32      `protobuf:"varint,4,opt,name=fan_chun_tian,json=fanChunTian,proto3" json:"fan_chun_tian,omitempty"`              // 反春天标志
	BombCount     uint32      `protobuf:"varint,5,opt,name=bomb_count,json=bombCount,proto3" json:"bomb_count,omitempty"`                      // 炸弹个数
	EachBombCount []uint32    `protobuf:"varint,6,rep,packed,name=each_bomb_count,json=eachBombCount,proto3" json:"each_bomb_count,omitempty"` // 炸弹个数
	CardCount     []uint32    `protobuf:"varint,7,rep,packed,name=card_count,json=cardCount,proto3" json:"card_count,omitempty"`               // 扑克数目
	CardData      []*CardInfo `protobuf:"bytes,8,rep,name=card_data,json=cardData,proto3" json:"card_data,omitempty"`                          // 扑克列表
}

func (x *S_GameConclude) Reset() {
	*x = S_GameConclude{}
	mi := &file_gameddz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_GameConclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_GameConclude) ProtoMessage() {}

func (x *S_GameConclude) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_GameConclude.ProtoReflect.Descriptor instead.
func (*S_GameConclude) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{15}
}

func (x *S_GameConclude) GetCellScore() int64 {
	if x != nil {
		return x.CellScore
	}
	return 0
}

func (x *S_GameConclude) GetGameScore() []int64 {
	if x != nil {
		return x.GameScore
	}
	return nil
}

func (x *S_GameConclude) GetChunTian() uint32 {
	if x != nil {
		return x.ChunTian
	}
	return 0
}

func (x *S_GameConclude) GetFanChunTian() uint32 {
	if x != nil {
		return x.FanChunTian
	}
	return 0
}

func (x *S_GameConclude) GetBombCount() uint32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

func (x *S_GameConclude) GetEachBombCount() []uint32 {
	if x != nil {
		return x.EachBombCount
	}
	return nil
}

func (x *S_GameConclude) GetCardCount() []uint32 {
	if x != nil {
		return x.CardCount
	}
	return nil
}

func (x *S_GameConclude) GetCardData() []*CardInfo {
	if x != nil {
		return x.CardData
	}
	return nil
}

// 托管
type S_TRUSTEE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrusteeUser uint32 `protobuf:"varint,1,opt,name=trustee_user,json=trusteeUser,proto3" json:"trustee_user,omitempty"` // 托管玩家
	Trustee     uint32 `protobuf:"varint,2,opt,name=trustee,proto3" json:"trustee,omitempty"`                            // 托管标志
}

func (x *S_TRUSTEE) Reset() {
	*x = S_TRUSTEE{}
	mi := &file_gameddz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S_TRUSTEE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S_TRUSTEE) ProtoMessage() {}

func (x *S_TRUSTEE) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S_TRUSTEE.ProtoReflect.Descriptor instead.
func (*S_TRUSTEE) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{16}
}

func (x *S_TRUSTEE) GetTrusteeUser() uint32 {
	if x != nil {
		return x.TrusteeUser
	}
	return 0
}

func (x *S_TRUSTEE) GetTrustee() uint32 {
	if x != nil {
		return x.Trustee
	}
	return 0
}

// 用户叫分
type C_RobLand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobLand uint32 `protobuf:"varint,1,opt,name=rob_land,json=robLand,proto3" json:"rob_land,omitempty"` // 抢地主标志，0代表不抢，1代表抢
}

func (x *C_RobLand) Reset() {
	*x = C_RobLand{}
	mi := &file_gameddz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C_RobLand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C_RobLand) ProtoMessage() {}

func (x *C_RobLand) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C_RobLand.ProtoReflect.Descriptor instead.
func (*C_RobLand) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{17}
}

func (x *C_RobLand) GetRobLand() uint32 {
	if x != nil {
		return x.RobLand
	}
	return 0
}

// 用户加倍
type C_AddTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddTimes uint32 `protobuf:"varint,1,opt,name=add_times,json=addTimes,proto3" json:"add_times,omitempty"` // 是否加倍(0,不加倍;1,加倍)
}

func (x *C_AddTimes) Reset() {
	*x = C_AddTimes{}
	mi := &file_gameddz_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C_AddTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C_AddTimes) ProtoMessage() {}

func (x *C_AddTimes) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C_AddTimes.ProtoReflect.Descriptor instead.
func (*C_AddTimes) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{18}
}

func (x *C_AddTimes) GetAddTimes() uint32 {
	if x != nil {
		return x.AddTimes
	}
	return 0
}

// 用户出牌
type C_OutCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardCount uint32   `protobuf:"varint,1,opt,name=card_count,json=cardCount,proto3" json:"card_count,omitempty"`     // 出牌数目
	CardData  []uint32 `protobuf:"varint,2,rep,packed,name=card_data,json=cardData,proto3" json:"card_data,omitempty"` // 扑克数据
}

func (x *C_OutCard) Reset() {
	*x = C_OutCard{}
	mi := &file_gameddz_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C_OutCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C_OutCard) ProtoMessage() {}

func (x *C_OutCard) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C_OutCard.ProtoReflect.Descriptor instead.
func (*C_OutCard) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{19}
}

func (x *C_OutCard) GetCardCount() uint32 {
	if x != nil {
		return x.CardCount
	}
	return 0
}

func (x *C_OutCard) GetCardData() []uint32 {
	if x != nil {
		return x.CardData
	}
	return nil
}

// 托管
type C_TRUSTEE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trustee uint32 `protobuf:"varint,1,opt,name=trustee,proto3" json:"trustee,omitempty"` // 托管标志(1，托管；0，取消托管)
}

func (x *C_TRUSTEE) Reset() {
	*x = C_TRUSTEE{}
	mi := &file_gameddz_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C_TRUSTEE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C_TRUSTEE) ProtoMessage() {}

func (x *C_TRUSTEE) ProtoReflect() protoreflect.Message {
	mi := &file_gameddz_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C_TRUSTEE.ProtoReflect.Descriptor instead.
func (*C_TRUSTEE) Descriptor() ([]byte, []int) {
	return file_gameddz_proto_rawDescGZIP(), []int{20}
}

func (x *C_TRUSTEE) GetTrustee() uint32 {
	if x != nil {
		return x.Trustee
	}
	return 0
}

var File_gameddz_proto protoreflect.FileDescriptor

var file_gameddz_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x62, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x22, 0x1e, 0x0a, 0x08, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x0c,
	0x53, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x0c, 0x53, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd3,
	0x04, 0x0a, 0x10, 0x53, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xf3, 0x07, 0x0a, 0x0c, 0x53, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x65, 0x6c,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x57, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x53,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x53, 0x5f, 0x52,
	0x65, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x53, 0x5f, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a,
	0x0b, 0x53, 0x5f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x09, 0x53, 0x5f,
	0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x5f, 0x6c,
	0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x5f,
	0x6c, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x4c,
	0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0a, 0x53, 0x5f, 0x41,
	0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x0c, 0x53, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x09,
	0x53, 0x5f, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0x38, 0x0a, 0x0d, 0x53,
	0x5f, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x5f, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x43,
	0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x73, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0xa8,
	0x02, 0x0a, 0x0e, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x54, 0x69, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x54, 0x69, 0x61, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x61, 0x63, 0x68, 0x42, 0x6f,
	0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x73, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x09, 0x53, 0x5f, 0x54,
	0x52, 0x55, 0x53, 0x54, 0x45, 0x45, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x65, 0x22, 0x26, 0x0a, 0x09, 0x43, 0x5f, 0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x22, 0x29, 0x0a, 0x0a, 0x43,
	0x5f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x09, 0x43, 0x5f, 0x4f, 0x75, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x25, 0x0a, 0x09, 0x43, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x45, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x65, 0x2a, 0xfc, 0x02, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x47, 0x61,
	0x6d, 0x65, 0x64, 0x64, 0x7a, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x44, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x44, 0x5f, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x66, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x53,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x69,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x6b, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x45, 0x10, 0x6c, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x10, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44,
	0x5f, 0x53, 0x5f, 0x52, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x6f, 0x12,
	0x14, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x44, 0x5f, 0x43, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xca, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x44, 0x5f,
	0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xcb, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x49, 0x44, 0x5f, 0x43, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x45, 0x10, 0xcc,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x44, 0x5f, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x10, 0xcd, 0x01, 0x42, 0x13, 0x5a, 0x11, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x64, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_gameddz_proto_rawDescOnce sync.Once
	file_gameddz_proto_rawDescData = file_gameddz_proto_rawDesc
)

func file_gameddz_proto_rawDescGZIP() []byte {
	file_gameddz_proto_rawDescOnce.Do(func() {
		file_gameddz_proto_rawDescData = protoimpl.X.CompressGZIP(file_gameddz_proto_rawDescData)
	})
	return file_gameddz_proto_rawDescData
}

var file_gameddz_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gameddz_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_gameddz_proto_goTypes = []any{
	(CMDGameddz)(0),          // 0: bs.gameddz.CMDGameddz
	(*CardInfo)(nil),         // 1: bs.gameddz.CardInfo
	(*S_StatusFree)(nil),     // 2: bs.gameddz.S_StatusFree
	(*S_StatusCall)(nil),     // 3: bs.gameddz.S_StatusCall
	(*S_StatusAddTimes)(nil), // 4: bs.gameddz.S_StatusAddTimes
	(*S_StatusPlay)(nil),     // 5: bs.gameddz.S_StatusPlay
	(*S_GameStart)(nil),      // 6: bs.gameddz.S_GameStart
	(*S_ReOutCard)(nil),      // 7: bs.gameddz.S_ReOutCard
	(*S_AndroidCard)(nil),    // 8: bs.gameddz.S_AndroidCard
	(*S_CheatCard)(nil),      // 9: bs.gameddz.S_CheatCard
	(*S_RobLand)(nil),        // 10: bs.gameddz.S_RobLand
	(*S_AddTimes)(nil),       // 11: bs.gameddz.S_AddTimes
	(*S_BankerInfo)(nil),     // 12: bs.gameddz.S_BankerInfo
	(*S_OutCard)(nil),        // 13: bs.gameddz.S_OutCard
	(*S_OutCardFail)(nil),    // 14: bs.gameddz.S_OutCardFail
	(*S_PassCard)(nil),       // 15: bs.gameddz.S_PassCard
	(*S_GameConclude)(nil),   // 16: bs.gameddz.S_GameConclude
	(*S_TRUSTEE)(nil),        // 17: bs.gameddz.S_TRUSTEE
	(*C_RobLand)(nil),        // 18: bs.gameddz.C_RobLand
	(*C_AddTimes)(nil),       // 19: bs.gameddz.C_AddTimes
	(*C_OutCard)(nil),        // 20: bs.gameddz.C_OutCard
	(*C_TRUSTEE)(nil),        // 21: bs.gameddz.C_TRUSTEE
}
var file_gameddz_proto_depIdxs = []int32{
	1, // 0: bs.gameddz.S_StatusPlay.last_card_data:type_name -> bs.gameddz.CardInfo
	1, // 1: bs.gameddz.S_StatusPlay.result_card:type_name -> bs.gameddz.CardInfo
	1, // 2: bs.gameddz.S_AndroidCard.hand_card:type_name -> bs.gameddz.CardInfo
	1, // 3: bs.gameddz.S_CheatCard.card_data:type_name -> bs.gameddz.CardInfo
	1, // 4: bs.gameddz.S_OutCard.result_card:type_name -> bs.gameddz.CardInfo
	1, // 5: bs.gameddz.S_PassCard.result_card:type_name -> bs.gameddz.CardInfo
	1, // 6: bs.gameddz.S_GameConclude.card_data:type_name -> bs.gameddz.CardInfo
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_gameddz_proto_init() }
func file_gameddz_proto_init() {
	if File_gameddz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gameddz_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gameddz_proto_goTypes,
		DependencyIndexes: file_gameddz_proto_depIdxs,
		EnumInfos:         file_gameddz_proto_enumTypes,
		MessageInfos:      file_gameddz_proto_msgTypes,
	}.Build()
	File_gameddz_proto = out.File
	file_gameddz_proto_rawDesc = nil
	file_gameddz_proto_goTypes = nil
	file_gameddz_proto_depIdxs = nil
}
